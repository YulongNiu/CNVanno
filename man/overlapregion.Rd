% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/region.R
\name{OverlapRegionRate}
\alias{OverlapRegionRate}
\alias{OverlapRegion}
\alias{SortRegion}
\alias{ReduceRegion}
\title{Overlapped regions}
\usage{
OverlapRegionRate(regionf, regionMat)

OverlapRegion(regionf, regionMat, extend = 100L)

SortRegion(regionMat)

ReduceRegion(regionMat, gap)
}
\arguments{
\item{regionf}{A row of \code{tbl_df} with at least two columns: "start" (integer) and "end" (integer).}

\item{regionMat}{A \code{tbl_df} with at least 2 columns named "start" and "end". In the \code{OverlapRegionRate()} and \code{ReduceRegion()} function, use the \code{SortRegion()} to sort the \code{regionMat} at first. In \code{SortRegion()}, the `regionMat` may contain other columns.}

\item{extend}{A \code{integer} value indicates the extended length in both direction.}

\item{gap}{An \code{integer} indicate the allowed length between two regions (at same chromosome with same type).}
}
\value{
\itemize{
  \item \code{OverlapRegionRate()}: A \code{tbl_df}.
  \item \code{OverlapRegion()}: A \code{numeric} matrix with four columns. 1st column is the overlap rate of `regionf`, 2nd column is the overlap rate of `regionMat`, 3rd and 4th columns are intersection start and end regions.
  \item \code{SortRegion()}: The same object as the input.
  \item \code{ReduceRegion()}: The same object as the input.
}
}
\description{
Find regions have intersections
}
\details{
\itemize{
  \item \code{OverlapRegionRate()}: Check if extended regions have intersections with overlap rates.
  \item \code{OverlapRegion()}: Check regions have interactions
  \item \code{SortRegion()}: Sort the "start" and "end" columns resulting in the "start" column is less than or equal to that of the "end" column. At last, the "start" column is also sorted.
  \item \code{ReduceRegion()}: Merge concatenated regions.
}
}
\examples{
require('magrittr')
require('tibble')

tMat <- tibble(start = c(1L, 103L, 111L, 49L, 10L),
               end = c(101L, 112L, 1000L, 8L, 86L)) \%>\%
  SortRegion

tReg <- tibble(chromosome = 'chr1', start = 100L, end = 110L)

## overlapped regions
OverlapRegion(tReg, tMat, extend = 0L)

## overlap rate
OverlapRegionRate(tReg, tMat)

## reduce region
rMat <- tibble(start = c(1, 20, 13, 14, 15, 19, 34, 46),
               end = c(12, 21, 8, 19, 29, 24, 35, 40)) \%>\%
  SortRegion

rM <- tibble(start = as.integer(c(4, 2, 3, 5, 24, 27, 29, 28, 35)),
             end = as.integer(c(1, 6, 20, 6, 25, 31, 30, 33, 37))) \%>\%
  SortRegion
ReduceRegion(rM, gap = 0L)
ReduceRegion(rM, gap = 1L)
ReduceRegion(rM, gap = 2L)
ReduceRegion(rM, gap = 3L)
}
\author{
Yulong Niu \email{yulong.niu@hotmail.com}
}
